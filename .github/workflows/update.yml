name: Update

on:
  # push:
  #   branches: ["main"]
  # pull_request:
  #   branches: ["main"]
  schedule:
    - cron: "0 10 * * 1,3,5"
  workflow_dispatch:

permissions:
  actions: write
  contents: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

# KUDOS to this awesome page for explaining a simple method for a dynamic matrix:
# https://brunoscheufler.com/blog/2021-10-09-generating-dynamic-github-actions-workflows-with-the-job-matrix-strategy

jobs:
  update_model_list:
    name: "Update model list"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: poetry

      - name: Cache playwright browsers
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright

      - name: Install dependencies
        run: poetry install --only main

      - name: Install playwright browsers
        run: poetry run playwright install firefox
        if: steps.playwright-cache.outputs.cache-hit != 'true'

      - name: Get the latest models
        run: poetry run update_models
        env:
          PYTHONUNBUFFERED: 1

      - name: Commit and push if it changed
        run: |-
          git config user.name "Ponick Khan"
          git config user.email "ponickid@gmail.com"
          git add output
          timestamp=$(date -u)
          git commit -m "Updating models list: ${timestamp}" || exit 0
          # Sometimes there are leftover .pyc files.
          git clean -fxd
          git status
          git pull --rebase
          git push

      - name: Generate a list of models for the actions matrix
        id: set-matrix
        run: |
          export MODELS=$(jq -cr "[.[].modelCode]" output/models.json)
          echo -n 'matrix={"model": ' >> $GITHUB_OUTPUT
          echo -n $MODELS >> $GITHUB_OUTPUT
          echo '}' >> $GITHUB_OUTPUT

          cat $GITHUB_OUTPUT

  update_each_model:
    name: "Update"
    needs: update_model_list
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix: ${{fromJSON(needs.update_model_list.outputs.matrix)}}
    env:
      MODEL: ${{ matrix.model }}
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Ensure we have the latest repository data
        run: git pull --rebase

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: poetry

      - name: Cache playwright browsers
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright

      - name: Install dependencies
        run: poetry install --only main

      - name: Install playwright browsers
        run: poetry run playwright install firefox
        if: steps.playwright-cache.outputs.cache-hit != 'true'

      - name: Get vehicles matching model
        run: poetry run update_vehicles
        env:
          PYTHONUNBUFFERED: 1

      - name: Store image data in artifact
        uses: actions/upload-artifact@v3
        with:
          name: "output"
          path: "output/${{ env.MODEL }}*"

  commit_changes:
    name: "Commit changes"
    runs-on: ubuntu-latest
    needs: [update_each_model]
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Download image data artifacts
        uses: actions/download-artifact@v3

      - name: Commit and push if it changed
        run: |-
          git config user.name "Ponick Khan"
          git config user.email "ponickid@gmail.com"
          git add output
          timestamp=$(date -u)
          git commit -m "Updating vehicle data: ${timestamp}" || exit 0
          git clean -fxd
          git status
          git pull --rebase
          git push
